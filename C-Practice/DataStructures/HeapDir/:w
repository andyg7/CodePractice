#include<stdio.h>
#include<stdlib.h>
#include<assert.h>
#include "MyHeap.h"
#include "MyQueue.h"

static int getRow(int n);

void addHeapNode(struct HeapNode **element, int n) {
	//printf("%s %d\n", "adding ", n);
	struct HeapNode *newNode = (struct HeapNode *)malloc(sizeof(struct HeapNode));
	newNode->data = n;
	newNode->leftChild = NULL;
	newNode->rightChild = NULL;
	struct node *queue = NULL;
	if(*element == NULL) {
		(*element) = newNode;	
	} else {
		struct HeapNode **iterator = (element);		
		int iteratorSize = sizeof(*iterator);
		insert(&queue, iterator, iteratorSize);
		bool foundPos = false;
		while(foundPos == false) {
			//printf("%s\n", "still looking for next position");
			struct HeapNode *currentHeapNode = *((struct HeapNode **)frontElement(&queue));
			assert(currentHeapNode != NULL);
			//printf("%s %d\n", "current next position is: ", currentHeapNode->data);
			if(currentHeapNode->leftChild == NULL) {
				foundPos = true;
				currentHeapNode->leftChild = newNode;
			} else if(currentHeapNode->rightChild == NULL) {
				foundPos = true;
				currentHeapNode->rightChild = newNode;
			}
			if(foundPos == false) {
				insert(&queue, &(currentHeapNode->leftChild), iteratorSize);
				insert(&queue, &(currentHeapNode->rightChild), iteratorSize);
				deque(&queue);
			}
		}
	}
	freeQueue(&queue);
}

void bfs(struct HeapNode **element) {
	printf("%s\n", "Printing Heap: ");
	int nodeCounter = 0;
	int currentRow = 0;
	struct node *queue = NULL;
	struct HeapNode **iterator = element;
	int iteratorSize = sizeof(*iterator);
	insert(&queue, iterator, iteratorSize);
	while(isEmpty(&queue) == false) {
		struct HeapNode *currentHeapNode = *((struct HeapNode **)frontElement(&queue));
		assert(currentHeapNode != NULL);
		int currentData = currentHeapNode->data;
		if(currentHeapNode->leftChild != NULL) {
			insert(&queue, &(currentHeapNode->leftChild), iteratorSize);
		}
		if(currentHeapNode->rightChild != NULL) {
			insert(&queue, &(currentHeapNode->rightChild), iteratorSize);
		}
		int row = getRow(nodeCounter);
		if(row == currentRow) {
			printf("%d", currentData);
		} else {
			printf("\n%s %d\n", "row", row);
			printf("%d ", currentData);
		}
		deque(&queue);
		nodeCounter++;
	}
}

static int getRow(int n) {
	n = n + 1;
	int row = 0;
	int result = 1;
	while(n >= result) {
		result = result * 2;
		row++;
	}
	return row;
}
